import { FileSystemWriter } from '../../src/file-handling/file-system-writer';
import { ERRORS } from '../../src/errors';
import requestFileSystemMock, { FILE_URL, WRITE_STATUS } from '../helpers/request-file-system-mock';
const FILE_NAME = 'testFileName';
const FILE_SIZE = 1024;

describe('FileSystemWriter', () => {
    describe('constructor()', () => {
        it('should expose fileName and fileSize', () => {
            const writer = new FileSystemWriter(FILE_NAME, FILE_SIZE);

            expect(writer.fileName).toEqual(FILE_NAME);
            expect(writer.fileSize).toEqual(FILE_SIZE);
        });
    });

    describe('isSupported()', () => {
        it('should return true when File System API works', async () => {
            window.requestFileSystem = (storageType, size, onSuccess, onError) => {
                expect(storageType).toBe(window.TEMPORARY);
                expect(size).toBe(1);
                expect(typeof onSuccess).toBe('function');
                expect(typeof onError).toBe('function');

                onSuccess();
            };

            const result = await FileSystemWriter.isSupported();
            expect(result).toBeTruthy();
        });

        it('should return false when File System API doesn\'t work', async () => {
            window.requestFileSystem = (storageType, size, onSuccess, onError) => {
                expect(storageType).toBe(window.TEMPORARY);
                expect(size).toBe(1);
                expect(typeof onSuccess).toBe('function');
                expect(typeof onError).toBe('function');

                onError();
            };

            const result = await FileSystemWriter.isSupported();
            expect(result).toBeFalsy();
        });

        it('should return false when File System API is not supported', async () => {
            window.requestFileSystem = null;
            window.webkitRequestFileSystem = null;

            const result = await FileSystemWriter.isSupported();
            expect(result).toBeFalsy();
        });
    });

    describe('init()', () => {
        it('should initialize writer and prepare file to write', async () => {
            FileSystemWriter.isSupported = () => true;
            requestFileSystemMock();

            const writer = new FileSystemWriter(FILE_NAME, FILE_SIZE);
            await writer.init();

            expect(writer.fileEntry).toBeDefined();
            expect(writer.fileWriter).toBeDefined();
        });

        it('shouldn\'t initialize writer when File System API is not supported', async () => {
            FileSystemWriter.isSupported = () => false;

            const writer = new FileSystemWriter(FILE_NAME, FILE_SIZE);

            try {
                await writer.init();
            } catch (error) {
                expect(error).toEqual({ error: ERRORS.FILE_SYSTEM_API_NOT_SUPPORTED });
            }
        });
    });

    describe('requestFileSystem()', () => {
        it('should return global requestFileSystem method or webkitRequestFileSystem method', () => {
            window.requestFileSystem = 'requestFileSystem';
            window.webkitRequestFileSystem = 'webkitRequestFileSystem';
            expect(FileSystemWriter.requestFileSystem()).toBe('requestFileSystem');
            window.requestFileSystem = null;
            expect(FileSystemWriter.requestFileSystem()).toBe('webkitRequestFileSystem');
            window.webkitRequestFileSystem = null;
            expect(FileSystemWriter.requestFileSystem()).toBeFalsy();
        });
    });

    describe('write()', () => {
        it('should call write method on fileWriter object and wait for onwriteend event', async () => {
            FileSystemWriter.isSupported = () => true;
            requestFileSystemMock();

            const writer = new FileSystemWriter(FILE_NAME, FILE_SIZE);
            await writer.init();
            await writer.write();
            expect(writer.fileWriter.status).toBe(WRITE_STATUS.FINISHED);
        });
    });

    describe('getFileURL()', () => {
        it('should return URL to file generated by fileWriter', async () => {
            FileSystemWriter.isSupported = () => true;
            requestFileSystemMock();

            const writer = new FileSystemWriter(FILE_NAME, FILE_SIZE);
            await writer.init();

            expect(writer.getFileURL()).toBe(FILE_URL);
        });
    });
});
